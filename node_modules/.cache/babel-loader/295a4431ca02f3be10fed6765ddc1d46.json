{"ast":null,"code":"import { createIsAfterIgnoreDatePart } from '../../utils/time-utils';\nimport { useValidation } from './useValidation';\nexport var validateTime = function validateTime(utils, value, _ref) {\n  var minTime = _ref.minTime,\n    maxTime = _ref.maxTime,\n    shouldDisableTime = _ref.shouldDisableTime,\n    disableIgnoringDatePartForTimeValidation = _ref.disableIgnoringDatePartForTimeValidation;\n  var date = utils.date(value);\n  var isAfterComparingFn = createIsAfterIgnoreDatePart(Boolean(disableIgnoringDatePartForTimeValidation), utils);\n  if (value === null) {\n    return null;\n  }\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n    case Boolean(minTime && isAfterComparingFn(minTime, date)):\n      return 'minTime';\n    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):\n      return 'maxTime';\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), 'hours')):\n      return 'shouldDisableTime-hours';\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), 'minutes')):\n      return 'shouldDisableTime-minutes';\n    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), 'seconds')):\n      return 'shouldDisableTime-seconds';\n    default:\n      return null;\n  }\n};\nvar isSameTimeError = function isSameTimeError(a, b) {\n  return a === b;\n};\nexport var useTimeValidation = function useTimeValidation(props) {\n  return useValidation(props, validateTime, isSameTimeError);\n};","map":null,"metadata":{},"sourceType":"module"}