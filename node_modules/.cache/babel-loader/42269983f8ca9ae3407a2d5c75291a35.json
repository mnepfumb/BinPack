{"ast":null,"code":"import _classCallCheck from \"/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"hasSelected\", \"isInner\", \"type\", \"value\"];\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { CLOCK_WIDTH, CLOCK_HOUR_WIDTH } from './shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ClockPointerRoot = styled('div')(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _extends({\n    width: 2,\n    backgroundColor: theme.palette.primary.main,\n    position: 'absolute',\n    left: 'calc(50% - 1px)',\n    bottom: '50%',\n    transformOrigin: 'center bottom 0px'\n  }, ownerState.toAnimateTransform && {\n    transition: theme.transitions.create(['transform', 'height'])\n  });\n});\nvar ClockPointerThumb = styled('div')(function (_ref2) {\n  var theme = _ref2.theme,\n    ownerState = _ref2.ownerState;\n  return _extends({\n    width: 4,\n    height: 4,\n    backgroundColor: theme.palette.primary.contrastText,\n    borderRadius: '50%',\n    position: 'absolute',\n    top: -21,\n    left: \"calc(50% - \".concat(CLOCK_HOUR_WIDTH / 2, \"px)\"),\n    border: \"\".concat((CLOCK_HOUR_WIDTH - 4) / 2, \"px solid \").concat(theme.palette.primary.main),\n    boxSizing: 'content-box'\n  }, ownerState.hasSelected && {\n    backgroundColor: theme.palette.primary.main\n  });\n});\n/**\n * @ignore - internal component.\n * TODO: Remove class\n */\n\nexport var ClockPointer = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClockPointer, _React$Component);\n  var _super = _createSuper(ClockPointer);\n  function ClockPointer() {\n    var _this;\n    _classCallCheck(this, ClockPointer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      toAnimateTransform: false,\n      previousType: undefined\n    };\n    return _this;\n  }\n  _createClass(ClockPointer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        isInner = _this$props.isInner,\n        type = _this$props.type,\n        value = _this$props.value,\n        other = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      var ownerState = _extends({}, this.props, this.state);\n      var getAngleStyle = function getAngleStyle() {\n        var max = type === 'hours' ? 12 : 60;\n        var angle = 360 / max * value;\n        if (type === 'hours' && value > 12) {\n          angle -= 360; // round up angle to max 360 degrees\n        }\n\n        return {\n          height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),\n          transform: \"rotateZ(\".concat(angle, \"deg)\")\n        };\n      };\n      return /*#__PURE__*/_jsx(ClockPointerRoot, _extends({\n        style: getAngleStyle(),\n        className: className,\n        ownerState: ownerState\n      }, other, {\n        children: /*#__PURE__*/_jsx(ClockPointerThumb, {\n          ownerState: ownerState\n        })\n      }));\n    }\n  }]);\n  return ClockPointer;\n}(React.Component);\nClockPointer.getDerivedStateFromProps = function (nextProps, state) {\n  if (nextProps.type !== state.previousType) {\n    return {\n      toAnimateTransform: true,\n      previousType: nextProps.type\n    };\n  }\n  return {\n    toAnimateTransform: false,\n    previousType: nextProps.type\n  };\n};","map":null,"metadata":{},"sourceType":"module"}