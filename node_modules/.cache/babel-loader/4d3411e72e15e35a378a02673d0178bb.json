{"ast":null,"code":"import _slicedToArray from \"/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport var usePickerState = function usePickerState(props, valueManager) {\n  var disableCloseOnSelect = props.disableCloseOnSelect,\n    onAccept = props.onAccept,\n    onChange = props.onChange,\n    value = props.value;\n  var utils = useUtils();\n  var _useOpenState = useOpenState(props),\n    isOpen = _useOpenState.isOpen,\n    setIsOpen = _useOpenState.setIsOpen;\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n  var parsedDateValue = React.useMemo(function () {\n    return valueManager.parseInput(utils, value);\n  }, [valueManager, utils, value]);\n  var _React$useState = React.useState(parsedDateValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    lastValidDateValue = _React$useState2[0],\n    setLastValidDateValue = _React$useState2[1];\n  React.useEffect(function () {\n    if (parsedDateValue != null) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [parsedDateValue]);\n  var _React$useReducer = React.useReducer(function (state, action) {\n      switch (action.type) {\n        case 'reset':\n          return initDraftableDate(action.payload);\n        case 'update':\n          return _extends({}, state, {\n            draft: action.payload\n          });\n        default:\n          return state;\n      }\n    }, parsedDateValue, initDraftableDate),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    draftState = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n  var _React$useState3 = React.useState(draftState.committed),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    initialDate = _React$useState4[0],\n    setInitialDate = _React$useState4[1]; // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    isMobileKeyboardViewOpen = _React$useState6[0],\n    setMobileKeyboardViewOpen = _React$useState6[1];\n  var acceptDate = React.useCallback(function (acceptedDate, needClosePicker) {\n    onChange(acceptedDate);\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  var wrapperProps = React.useMemo(function () {\n    return {\n      open: isOpen,\n      onClear: function onClear() {\n        return acceptDate(valueManager.emptyValue, true);\n      },\n      onAccept: function onAccept() {\n        return acceptDate(draftState.draft, true);\n      },\n      onDismiss: function onDismiss() {\n        return acceptDate(initialDate, true);\n      },\n      onSetToday: function onSetToday() {\n        var now = utils.date();\n        dispatch({\n          type: 'update',\n          payload: now\n        });\n        acceptDate(now, !disableCloseOnSelect);\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  var pickerProps = React.useMemo(function () {\n    return {\n      date: draftState.draft,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: function toggleMobileKeyboardView() {\n        return setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: function onDateChange(newDate, wrapperVariant) {\n        var selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n        dispatch({\n          type: 'update',\n          payload: newDate\n        });\n        if (selectionState === 'partial') {\n          acceptDate(newDate, false);\n        }\n        if (selectionState === 'finish') {\n          var shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n          acceptDate(newDate, shouldCloseOnSelect);\n        } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  var handleInputChange = React.useCallback(function (date, keyboardInputValue) {\n    var cleanDate = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, date) : date;\n    onChange(cleanDate, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  var inputProps = React.useMemo(function () {\n    return {\n      onChange: handleInputChange,\n      open: isOpen,\n      rawValue: value,\n      openPicker: function openPicker() {\n        return setIsOpen(true);\n      }\n    };\n  }, [handleInputChange, isOpen, value, setIsOpen]);\n  var pickerState = {\n    pickerProps: pickerProps,\n    inputProps: inputProps,\n    wrapperProps: wrapperProps\n  };\n  React.useDebugValue(pickerState, function () {\n    return {\n      MuiPickerState: {\n        pickerDraft: draftState,\n        other: pickerState\n      }\n    };\n  });\n  return pickerState;\n};","map":{"version":3,"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","_useOpenState","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","useMemo","parseInput","_React$useState","useState","_React$useState2","_slicedToArray","lastValidDateValue","setLastValidDateValue","useEffect","_React$useReducer","useReducer","state","action","type","payload","_React$useReducer2","draftState","dispatch","areValuesEqual","_React$useState3","_React$useState4","initialDate","setInitialDate","_React$useState5","_React$useState6","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","arguments","length","undefined","shouldCloseOnSelect","handleInputChange","keyboardInputValue","cleanDate","valueReducer","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"sources":["/Users/bluevisionai/Desktop/untitled folder/untitled folder/gitdagray/binpack-16-03-23/node_modules/@mui/x-date-pickers/internals/hooks/usePickerState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = React.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);\n  const [lastValidDateValue, setLastValidDateValue] = React.useState(parsedDateValue);\n  React.useEffect(() => {\n    if (parsedDateValue != null) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [parsedDateValue]);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const handleInputChange = React.useCallback((date, keyboardInputValue) => {\n    const cleanDate = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, date) : date;\n    onChange(cleanDate, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  const inputProps = React.useMemo(() => ({\n    onChange: handleInputChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [handleInputChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}