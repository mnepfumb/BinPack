{"ast":null,"code":"export var getMeridiem = function getMeridiem(date, utils) {\n  if (!date) {\n    return null;\n  }\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\nexport var convertValueToMeridiem = function convertValueToMeridiem(value, meridiem, ampm) {\n  if (ampm) {\n    var currentMeridiem = value >= 12 ? 'pm' : 'am';\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n  return value;\n};\nexport var convertToMeridiem = function convertToMeridiem(time, meridiem, ampm, utils) {\n  var newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\nexport var getSecondsInDay = function getSecondsInDay(date, utils) {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n};\nexport var createIsAfterIgnoreDatePart = function createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils) {\n  return function (dateLeft, dateRight) {\n    if (disableIgnoringDatePartForTimeValidation) {\n      return utils.isAfter(dateLeft, dateRight);\n    }\n    return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n  };\n};","map":{"version":3,"names":["getMeridiem","date","utils","getHours","convertValueToMeridiem","value","meridiem","ampm","currentMeridiem","convertToMeridiem","time","newHoursAmount","setHours","getSecondsInDay","getMinutes","getSeconds","createIsAfterIgnoreDatePart","disableIgnoringDatePartForTimeValidation","dateLeft","dateRight","isAfter"],"sources":["/Users/bluevisionai/Documents/personal_github/Untitled/BinPack/node_modules/@mui/x-date-pickers/internals/utils/time-utils.js"],"sourcesContent":["export const getMeridiem = (date, utils) => {\n  if (!date) {\n    return null;\n  }\n\n  return utils.getHours(date) >= 12 ? 'pm' : 'am';\n};\nexport const convertValueToMeridiem = (value, meridiem, ampm) => {\n  if (ampm) {\n    const currentMeridiem = value >= 12 ? 'pm' : 'am';\n\n    if (currentMeridiem !== meridiem) {\n      return meridiem === 'am' ? value - 12 : value + 12;\n    }\n  }\n\n  return value;\n};\nexport const convertToMeridiem = (time, meridiem, ampm, utils) => {\n  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);\n  return utils.setHours(time, newHoursAmount);\n};\nexport const getSecondsInDay = (date, utils) => {\n  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);\n};\nexport const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {\n  if (disableIgnoringDatePartForTimeValidation) {\n    return utils.isAfter(dateLeft, dateRight);\n  }\n\n  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);\n};"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAI,EAAEC,KAAK,EAAK;EAC1C,IAAI,CAACD,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,OAAOC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;AACjD,CAAC;AACD,OAAO,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAK;EAC/D,IAAIA,IAAI,EAAE;IACR,IAAMC,eAAe,GAAGH,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;IAEjD,IAAIG,eAAe,KAAKF,QAAQ,EAAE;MAChC,OAAOA,QAAQ,KAAK,IAAI,GAAGD,KAAK,GAAG,EAAE,GAAGA,KAAK,GAAG,EAAE;IACpD;EACF;EAEA,OAAOA,KAAK;AACd,CAAC;AACD,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,IAAI,EAAEJ,QAAQ,EAAEC,IAAI,EAAEL,KAAK,EAAK;EAChE,IAAMS,cAAc,GAAGP,sBAAsB,CAACF,KAAK,CAACC,QAAQ,CAACO,IAAI,CAAC,EAAEJ,QAAQ,EAAEC,IAAI,CAAC;EACnF,OAAOL,KAAK,CAACU,QAAQ,CAACF,IAAI,EAAEC,cAAc,CAAC;AAC7C,CAAC;AACD,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAeA,CAAIZ,IAAI,EAAEC,KAAK,EAAK;EAC9C,OAAOA,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,GAAG,IAAI,GAAGC,KAAK,CAACY,UAAU,CAACb,IAAI,CAAC,GAAG,EAAE,GAAGC,KAAK,CAACa,UAAU,CAACd,IAAI,CAAC;AAC3F,CAAC;AACD,OAAO,IAAMe,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIC,wCAAwC,EAAEf,KAAK;EAAA,OAAK,UAACgB,QAAQ,EAAEC,SAAS,EAAK;IACvH,IAAIF,wCAAwC,EAAE;MAC5C,OAAOf,KAAK,CAACkB,OAAO,CAACF,QAAQ,EAAEC,SAAS,CAAC;IAC3C;IAEA,OAAON,eAAe,CAACK,QAAQ,EAAEhB,KAAK,CAAC,GAAGW,eAAe,CAACM,SAAS,EAAEjB,KAAK,CAAC;EAC7E,CAAC;AAAA"},"metadata":{},"sourceType":"module"}