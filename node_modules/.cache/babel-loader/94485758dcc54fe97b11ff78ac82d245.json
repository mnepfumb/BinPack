{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\n/**\n * core component for echarts binding\n */\nvar EChartsReactCore = /** @class */function (_super) {\n  __extends(EChartsReactCore, _super);\n  function EChartsReactCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.echarts = props.echarts;\n    _this.ele = null;\n    _this.isInitialResize = true;\n    return _this;\n  }\n  EChartsReactCore.prototype.componentDidMount = function () {\n    this.renderNewEcharts();\n  };\n  // update\n  EChartsReactCore.prototype.componentDidUpdate = function (prevProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    var shouldSetOption = this.props.shouldSetOption;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (!isEqual(prevProps.theme, this.props.theme) || !isEqual(prevProps.opts, this.props.opts) || !isEqual(prevProps.onEvents, this.props.onEvents)) {\n      this.dispose();\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n    // when these props are not isEqual, update echarts\n    var pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  };\n  EChartsReactCore.prototype.componentWillUnmount = function () {\n    this.dispose();\n  };\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  EChartsReactCore.prototype.getEchartsInstance = function () {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  };\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  EChartsReactCore.prototype.dispose = function () {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  };\n  /**\n   * render a new echarts instance\n   */\n  EChartsReactCore.prototype.renderNewEcharts = function () {\n    var _this = this;\n    var _a = this.props,\n      onEvents = _a.onEvents,\n      onChartReady = _a.onChartReady;\n    // 1. new echarts instance\n    var echartsInstance = this.updateEChartsOption();\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, function () {\n        _this.resize();\n      });\n    }\n  };\n  // bind the events\n  EChartsReactCore.prototype.bindEvents = function (instance, events) {\n    function _bindEvent(eventName, func) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, function (param) {\n          func(param, instance);\n        });\n      }\n    }\n    // loop and bind\n    for (var eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  };\n  /**\n   * render the echarts\n   */\n  EChartsReactCore.prototype.updateEChartsOption = function () {\n    var _a = this.props,\n      option = _a.option,\n      _b = _a.notMerge,\n      notMerge = _b === void 0 ? false : _b,\n      _c = _a.lazyUpdate,\n      lazyUpdate = _c === void 0 ? false : _c,\n      showLoading = _a.showLoading,\n      _d = _a.loadingOption,\n      loadingOption = _d === void 0 ? null : _d;\n    // 1. get or initial the echarts object\n    var echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);else echartInstance.hideLoading();\n    return echartInstance;\n  };\n  /**\n   * resize wrapper\n   */\n  EChartsReactCore.prototype.resize = function () {\n    // 1. get the echarts object\n    var echartsInstance = this.getEchartsInstance();\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  };\n  EChartsReactCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      style = _a.style,\n      _b = _a.className,\n      className = _b === void 0 ? '' : _b;\n    // default height = 300\n    var newStyle = __assign({\n      height: 300\n    }, style);\n    return React.createElement(\"div\", {\n      ref: function ref(e) {\n        _this.ele = e;\n      },\n      style: newStyle,\n      className: \"echarts-for-react \" + className\n    });\n  };\n  return EChartsReactCore;\n}(PureComponent);\nexport default EChartsReactCore;","map":{"version":3,"sources":["../src/core.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}