{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { DatePicker as XDatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar warnedOnce = false;\nvar warn = function warn() {\n  if (!warnedOnce) {\n    console.warn(['MUI: The DatePicker component was moved from `@mui/lab` to `@mui/x-date-pickers`.', 'The component will no longer be exported from `@mui/lab` in the first release of July 2022.', '', \"You should use `import { DatePicker } from '@mui/x-date-pickers'`\", \"or `import { DatePicker } from '@mui/x-date-pickers/DatePicker'`\", '', 'More information about this migration on our blog: https://mui.com/blog/lab-date-pickers-to-mui-x/.'].join('\\n'));\n    warnedOnce = true;\n  }\n};\n\n/**\n * @ignore - do not document.\n */\nvar DatePicker = /*#__PURE__*/React.forwardRef(function DeprecatedDatePicker(props, ref) {\n  warn();\n  return /*#__PURE__*/_jsx(XDatePicker, _extends({\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DatePicker.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n  /**\n   * The components used for each slot.\n   * Either a string to use an HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    leftArrowButton: PropTypes.object,\n    rightArrowButton: PropTypes.object,\n    switchViewButton: PropTypes.object\n  }),\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TDateValue\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TDateValue\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TDateValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback firing on month change. @DateIOType\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\nexport default DatePicker;","map":null,"metadata":{},"sourceType":"module"}