{"ast":null,"code":"module.exports = function SimpleDateTime(props) {\n  return formatDateToReadable(props);\n};\nvar formatDateToReadable = function formatDateToReadable(props) {\n  var dateSeparator = props.dateSeparator ? props.dateSeparator : ' ';\n  var timeSeparator = props.timeSeparator ? props.timeSeparator : ' ';\n  var dateFormat = props.dateFormat ? props.dateFormat : '';\n  var timeFormat = props.timeFormat ? props.timeFormat : '';\n  ;\n  var showTime = props.showTime ? parseInt(props.showTime) : 1;\n  var showDate = props.showDate ? parseInt(props.showDate) : 1;\n  var meridians = props.meridians ? parseInt(props.meridians) : 0;\n  var DateToFormat = props.children;\n  if (!isValidDate(DateToFormat)) {\n    if (!isNaN(DateToFormat)) {\n      DateToFormat = new Date(DateToFormat * 1000);\n      if (!DateToFormat) {\n        return \"Invalid Date1\";\n      }\n    } else {\n      DateToFormat = new Date(DateToFormat);\n      if (!isValidDate(DateToFormat)) {\n        return \"Invalid Date2\";\n      }\n    }\n  }\n  if (!isValidDate(DateToFormat)) {\n    return \"Invalid Date3\";\n  }\n  var date = DateToFormat.getDate();\n  var month = DateToFormat.getMonth() + 1;\n  var year = DateToFormat.getFullYear();\n  var hour = DateToFormat.getHours();\n  var minutes = DateToFormat.getMinutes();\n  var seconds = DateToFormat.getSeconds();\n  if (showDate && showTime) {\n    return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  } else if (showDate && !showTime) {\n    return formatDate(date, month, year, dateSeparator, dateFormat);\n  } else if (!showDate && showTime) {\n    return formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  } else {\n    return formatDate(date, month, year, dateSeparator, dateFormat) + ' ' + formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians);\n  }\n};\nvar formatDate = function formatDate(date, month, year, dateSeparator, format) {\n  switch (format) {\n    case 'DMY':\n      return \"\".concat(date < 10 ? \"0\".concat(date) : \"\".concat(date)).concat(dateSeparator).concat(month < 10 ? \"0\".concat(month) : \"\".concat(month)).concat(dateSeparator).concat(year);\n    case 'MDY':\n      return \"\".concat(month < 10 ? \"0\".concat(month) : \"\".concat(month)).concat(dateSeparator).concat(date < 10 ? \"0\".concat(date) : \"\".concat(date)).concat(dateSeparator).concat(year);\n    case 'MYD':\n      return \"\".concat(month < 10 ? \"0\".concat(month) : \"\".concat(month)).concat(dateSeparator).concat(year).concat(dateSeparator).concat(date < 10 ? \"0\".concat(date) : \"\".concat(date));\n    default:\n      return \"\".concat(year).concat(dateSeparator).concat(month < 10 ? \"0\".concat(month) : \"\".concat(month)).concat(dateSeparator).concat(date < 10 ? \"0\".concat(date) : \"\".concat(date));\n  }\n};\nvar formatTime = function formatTime(hour, minutes, seconds, timeSeparator, timeFormat, meridians) {\n  var ampm = 'am';\n  if (meridians) {\n    if (hour > 11) ampm = 'pm';\n    if (hour > 12) hour = parseInt(hour % 12);\n  }\n  switch (timeFormat) {\n    case 'HMS':\n      return \"\".concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour)).concat(timeSeparator).concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes)).concat(timeSeparator).concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds), \" \").concat(meridians ? \"\".concat(ampm) : \"\", \" \");\n    case 'HSM':\n      return \"\".concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour)).concat(timeSeparator).concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds)).concat(timeSeparator).concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes), \" \").concat(meridians ? \"\".concat(ampm) : \"\", \" \");\n    case 'MHS':\n      return \"\".concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes)).concat(timeSeparator).concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour)).concat(timeSeparator).concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds), \" \").concat(meridians ? \"\".concat(ampm) : \"\");\n    case 'MSH':\n      return \"\".concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes)).concat(timeSeparator).concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds)).concat(timeSeparator).concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour), \" \").concat(meridians ? \"\".concat(ampm) : \"\");\n    case 'SMH':\n      return \"\".concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds)).concat(timeSeparator).concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes)).concat(timeSeparator).concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour), \" \").concat(meridians ? \"\".concat(ampm) : \"\");\n    case 'SHM':\n      return \"\".concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds)).concat(timeSeparator).concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour)).concat(timeSeparator).concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes), \" \").concat(meridians ? \"\".concat(ampm) : \"\");\n    default:\n      return \"\".concat(hour < 10 ? \"0\".concat(hour) : \"\".concat(hour)).concat(timeSeparator).concat(minutes < 10 ? \"0\".concat(minutes) : \"\".concat(minutes)).concat(timeSeparator).concat(seconds < 10 ? \"0\".concat(seconds) : \"\".concat(seconds), \" \").concat(meridians ? \"\".concat(ampm) : \"\");\n  }\n};\nfunction isValidDate(date) {\n  return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date);\n}","map":null,"metadata":{},"sourceType":"script"}