{"ast":null,"code":"import { useValidation } from './useValidation';\nexport var validateDate = function validateDate(utils, value, _ref) {\n  var disablePast = _ref.disablePast,\n    disableFuture = _ref.disableFuture,\n    minDate = _ref.minDate,\n    maxDate = _ref.maxDate,\n    shouldDisableDate = _ref.shouldDisableDate;\n  var now = utils.date();\n  var date = utils.date(value);\n  if (date === null) {\n    return null;\n  }\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n    case Boolean(disableFuture && utils.isAfterDay(date, now)):\n      return 'disableFuture';\n    case Boolean(disablePast && utils.isBeforeDay(date, now)):\n      return 'disablePast';\n    case Boolean(minDate && utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n    default:\n      return null;\n  }\n};\nvar isSameDateError = function isSameDateError(a, b) {\n  return a === b;\n};\nexport var useDateValidation = function useDateValidation(props) {\n  return useValidation(props, validateDate, isSameDateError);\n};","map":{"version":3,"names":["useValidation","validateDate","utils","value","_ref","disablePast","disableFuture","minDate","maxDate","shouldDisableDate","now","date","isValid","Boolean","isAfterDay","isBeforeDay","isSameDateError","a","b","useDateValidation","props"],"sources":["/Users/bluevisionai/Documents/personal_github/Untitled/BinPack/node_modules/@mui/x-date-pickers/internals/hooks/validation/useDateValidation.js"],"sourcesContent":["import { useValidation } from './useValidation';\nexport const validateDate = (utils, value, {\n  disablePast,\n  disableFuture,\n  minDate,\n  maxDate,\n  shouldDisableDate\n}) => {\n  const now = utils.date();\n  const date = utils.date(value);\n\n  if (date === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n\n    case Boolean(disableFuture && utils.isAfterDay(date, now)):\n      return 'disableFuture';\n\n    case Boolean(disablePast && utils.isBeforeDay(date, now)):\n      return 'disablePast';\n\n    case Boolean(minDate && utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n\n    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n\n    default:\n      return null;\n  }\n};\n\nconst isSameDateError = (a, b) => a === b;\n\nexport const useDateValidation = props => useValidation(props, validateDate, isSameDateError);"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAEC,KAAK,EAAAC,IAAA,EAMnC;EAAA,IALJC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IACXC,aAAa,GAAAF,IAAA,CAAbE,aAAa;IACbC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IACPC,iBAAiB,GAAAL,IAAA,CAAjBK,iBAAiB;EAEjB,IAAMC,GAAG,GAAGR,KAAK,CAACS,IAAI,EAAE;EACxB,IAAMA,IAAI,GAAGT,KAAK,CAACS,IAAI,CAACR,KAAK,CAAC;EAE9B,IAAIQ,IAAI,KAAK,IAAI,EAAE;IACjB,OAAO,IAAI;EACb;EAEA,QAAQ,IAAI;IACV,KAAK,CAACT,KAAK,CAACU,OAAO,CAACT,KAAK,CAAC;MACxB,OAAO,aAAa;IAEtB,KAAKU,OAAO,CAACJ,iBAAiB,IAAIA,iBAAiB,CAACE,IAAI,CAAC,CAAC;MACxD,OAAO,mBAAmB;IAE5B,KAAKE,OAAO,CAACP,aAAa,IAAIJ,KAAK,CAACY,UAAU,CAACH,IAAI,EAAED,GAAG,CAAC,CAAC;MACxD,OAAO,eAAe;IAExB,KAAKG,OAAO,CAACR,WAAW,IAAIH,KAAK,CAACa,WAAW,CAACJ,IAAI,EAAED,GAAG,CAAC,CAAC;MACvD,OAAO,aAAa;IAEtB,KAAKG,OAAO,CAACN,OAAO,IAAIL,KAAK,CAACa,WAAW,CAACJ,IAAI,EAAEJ,OAAO,CAAC,CAAC;MACvD,OAAO,SAAS;IAElB,KAAKM,OAAO,CAACL,OAAO,IAAIN,KAAK,CAACY,UAAU,CAACH,IAAI,EAAEH,OAAO,CAAC,CAAC;MACtD,OAAO,SAAS;IAElB;MACE,OAAO,IAAI;EAAC;AAElB,CAAC;AAED,IAAMQ,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,CAAC,EAAEC,CAAC;EAAA,OAAKD,CAAC,KAAKC,CAAC;AAAA;AAEzC,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,KAAK;EAAA,OAAIpB,aAAa,CAACoB,KAAK,EAAEnB,YAAY,EAAEe,eAAe,CAAC;AAAA"},"metadata":{},"sourceType":"module"}