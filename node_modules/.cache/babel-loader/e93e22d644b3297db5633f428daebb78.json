{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useThemeProps } from '@mui/material/styles';\nimport { Clock } from '../internals/components/icons';\nimport { useUtils } from '../internals/hooks/useUtils';\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? \"Choose time, selected time is \".concat(utils.format(utils.date(value), 'fullTime')) : 'Choose time';\n}\nexport function useTimePickerDefaultizedProps(props, name) {\n  var _themeProps$ampm;\n\n  // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n  var themeProps = useThemeProps({\n    props: props,\n    name: name\n  });\n  var utils = useUtils();\n  var ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();\n  return _extends({\n    ampm: ampm,\n    openTo: 'hours',\n    views: ['hours', 'minutes'],\n    acceptRegex: ampm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: '__:__',\n    disableMaskedInput: ampm,\n    getOpenDialogAriaText: getTextFieldAriaText,\n    inputFormat: ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h\n  }, themeProps, {\n    components: _extends({\n      OpenPickerIcon: Clock\n    }, themeProps.components)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}